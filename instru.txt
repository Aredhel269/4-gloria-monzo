Per desplegar una API REST seguint l'estructura i les indicacions que vam establir anteriorment, aquí tens els passos detallats:

### 1. Defineix l'entitat de la tasca

1. Crea el fitxer `task.ts` dins la carpeta `domain/entities/`.
2. Defineix l'estructura de la tasca, incloent els atributs com `id`, `description` i `completed`.

```typescript
// domain/entities/task.ts
export interface Task {
    id: string;
    description: string;
    completed: boolean;
}
```

### 2. Defineix el repositori de tasques

1. Crea el fitxer `taskRepository.ts` dins la carpeta `domain/usecases/`.
2. Defineix la interfície `TaskRepository` amb els mètodes per gestionar tasques.

```typescript
// domain/usecases/taskRepository.ts
import { Task } from "../entities/task";

export interface TaskRepository {
    create(task: Task): Task;
    findById(id: string): Task | undefined;
    update(task: Task): Task | undefined;
    delete(id: string): void;
    findAll(): Task[];
}
```

### 3. Implementa el repositori de tasques

1. Crea el fitxer `taskRepositoryImpl.ts` dins la carpeta `infrastructure/database/`.
2. Implementa els mètodes de la interfície `TaskRepository` utilitzant un array com a emmagatzematge temporal.

```typescript
// infrastructure/database/taskRepositoryImpl.ts
import { Task } from "../../domain/entities/task";
import { TaskRepository } from "../../domain/usecases/taskRepository";

export class TaskRepositoryImpl implements TaskRepository {
    private tasks: Task[] = [];

    create(task: Task): Task {
        this.tasks.push(task);
        return task;
    }

    findById(id: string): Task | undefined {
        return this.tasks.find(task => task.id === id);
    }

    update(task: Task): Task | undefined {
        const index = this.tasks.findIndex(t => t.id === task.id);
        if (index !== -1) {
            this.tasks[index] = task;
            return task;
        }
        return undefined;
    }

    delete(id: string): void {
        this.tasks = this.tasks.filter(task => task.id !== id);
    }

    findAll(): Task[] {
        return this.tasks;
    }
}
```

### 4. Implementa els casos d'ús

1. Crea els fitxers `createTaskUsecase.ts`, `deleteTaskUsecase.ts`, `getTaskUsecase.ts` i `putTaskUsecase.ts` dins la carpeta `applications/usecase/`.
2. Implementa la lògica dels casos d'ús per a cada operació CRUD utilitzant el repositori de tasques.

```typescript
// applications/usecase/createTaskUsecase.ts
import { Task } from "../../domain/entities/task";
import { TaskRepository } from "../../domain/usecases/taskRepository";

export class CreateTaskUsecase {
    constructor(private taskRepository: TaskRepository) {}

    execute(task: Task): Task {
        return this.taskRepository.create(task);
    }
}
```

(Repeteix aquest procés per als altres casos d'ús amb les respectives lògiques de negoci)

### 5. Implementa els controladors

1. Crea el fitxer `taskController.ts` dins la carpeta `interfaces/controllers/`.
2. Implementa els controladors per a les operacions CRUD de la tasca, utilitzant els casos d'ús corresponents.

```typescript
// interfaces/controllers/taskController.ts
import express, { Request, Response } from 'express';
import { Task } from '../../domain/entities/task';
import { CreateTaskUsecase } from '../../applications/usecase/createTaskUsecase';
import { TaskRepositoryImpl } from '../../infrastructure/database/taskRepositoryImpl';

const router = express.Router();
const taskRepository = new TaskRepositoryImpl();
const createTaskUsecase = new CreateTaskUsecase(taskRepository);

router.post('/', (req: Request, res: Response) => {
    const task: Task = req.body;
    const createdTask = createTaskUsecase.execute(task);
    res.status(201).json(createdTask);
});

El codi proporcionat és el controlador de tasques (`TaskController`) que es responsabilitza de gestionar les peticions HTTP relacionades amb les tasques. 
Aquí tens una explicació de com implementar els endpoints (GET, PUT, DELETE) al mateix controlador:

1. **Petició POST per afegir una nova tasca (`/tasks`)**:
   - Aquesta ruta accepta peticions POST a `/tasks`.
   - Quan es rep una petició POST, el controlador extreu la tasca del cos de la sol·licitud (`req.body`).
   - Utilitza el cas d'ús `CreateTaskUsecase` per crear la nova tasca i retorna la tasca creada com a resposta amb un codi d'estat 201 (Created).

2. **Petició GET per obtenir la llista de tasques (`/tasks`)**:
   - Afegeix una nova ruta GET a `/tasks`.
   - Quan es rep una petició GET, utilitza el cas d'ús `GetTaskUsecase` per obtenir la llista completa de tasques.
   - Retorna la llista de tasques com a resposta amb un codi d'estat 200 (OK).

3. **Petició PUT per actualitzar una tasca existent (`/tasks/:id`)**:
   - Afegeix una nova ruta PUT a `/tasks/:id`.
   - Quan es rep una petició PUT, extreu la tasca actualitzada del cos de la sol·licitud (`req.body`) i l'identificador de la tasca dels paràmetres de la ruta (`req.params.id`).
   - Utilitza el cas d'ús `PutTaskUsecase` per actualitzar la tasca existent amb l'identificador proporcionat.
   - Retorna la tasca actualitzada com a resposta amb un codi d'estat 200 (OK).

4. **Petició DELETE per eliminar una tasca (`/tasks/:id`)**:
   - Afegeix una nova ruta DELETE a `/tasks/:id`.
   - Quan es rep una petició DELETE, utilitza l'identificador de la tasca dels paràmetres de la ruta (`req.params.id`).
   - Utilitza el cas d'ús `DeleteTaskUsecase` per eliminar la tasca amb l'identificador proporcionat.
   - Retorna un missatge de confirmació com a resposta amb un codi d'estat 204 (No Content).

Per implementar aquests altres endpoints, pots seguir el mateix patró que s'ha utilitzat per al endpoint POST, però adaptant-ho a cada cas d'ús específic i als seus requisits de sol·licitud i resposta.

Espero que això t'ajudi a implementar els altres endpoints al teu controlador de tasques! Si tens alguna pregunta addicional o necessites més clarificacions, no dubtis a preguntar.
export default router;
```

### 6. Configura l'aplicació Express.js

1. Crea el fitxer `app.ts` dins la carpeta `interfaces/http/`.
2. Configura l'aplicació Express.js, defineix les rutes i utilitza els controladors.

```typescript
// interfaces/http/app.ts
import express from 'express';
import taskController from '../controllers/taskController';

const app = express();

app.use(express.json());
app.use('/api/tasks', taskController);

export default app;
```

### 7. Inicia el servidor

1. Crea el fitxer `server.ts` dins la carpeta `infrastructure/server/`.
2. Configura i inicia el servidor Express.js.

```typescript
// infrastructure/server/server.ts
import express from 'express';
import app from '../http/app';

const server = express();
const port = process.env.PORT || 3000;

server.use(app);

server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
```

### 8. Inicia l'aplicació

1. A la carpeta arrel del projecte, crea un fitxer `index.ts`.
2. Importa i inicia el servidor.

```typescript
// index.ts
import './infrastructure/server/server';
```